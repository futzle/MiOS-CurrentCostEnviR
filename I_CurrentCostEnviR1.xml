<?xml version="1.0" encoding="UTF-8"?>
<implementation>
	<settings>
		<protocol>crlf</protocol>
		<handleChildren>1</handleChildren>
	</settings>
	<functions>

-- Power used/consumed by each appliance (0 is the "whole house" appliance).
APPLIANCE_POWER = { }
SERVICE_ID = "urn:futzle-com:serviceId:CurrentCostEnviR1"
ENERGY_SERVICE_ID = "urn:micasaverde-com:serviceId:EnergyMetering1"
TEMPERATURE_SERVICE_ID = "urn:upnp-org:serviceId:TemperatureSensor1"
CHILD_DEVICE = { }
DEBUG = false

-- Run once at Luup engine startup.
function initialize(lul_device)
	luup.log("Initializing CurrentCost EnviR")
	-- Help prevent race condition
	luup.io.intercept()

	-- Create child devices for the attached appliances.
	local childDevices = luup.chdev.start(lul_device)
	for child = 0, 9 do
		if (luup.variable_get(SERVICE_ID, "Appliance" .. tostring(child), lul_device) or "0" ~= "0") then
			luup.chdev.append(lul_device, childDevices, "Appliance" .. tostring(child),
				"Appliance " .. child, "urn:schemas-futzle-com:device:CurrentCostEnvirAppliance:1",
				"D_CurrentCostEnviRAppliance1.xml", "", "", false)
		end
	end
	luup.chdev.sync(lul_device, childDevices)

	-- Compute total power use for the parent device using this formula.
	-- Formula string contains sequences of +n or -n,
	-- adding or subtracting the appliance to compute a total.
	-- Default formula (0, equivalently +0) ignores appliances 1-9
	-- and counts only the whole-house reading.
	FORMULA = luup.variable_get(SERVICE_ID, "Formula", lul_device)
	if (FORMULA == nil) then
		luup.variable_set(SERVICE_ID, "Formula", "0", lul_device)
		FORMULA = "+0"
	else
		if (FORMULA:find("^%-") == nil) then
			FORMULA = "+" .. FORMULA
		end
	end
	luup.log("Power formula: " .. FORMULA)

	-- Automatically detect appliances and create child devices
	-- the next time that the Luup engine is reloaded.
	AUTO_DETECT = luup.variable_get(SERVICE_ID, "ApplianceAutoDetect", lul_device)
	if (AUTO_DETECT == nil) then
		luup.variable_set(SERVICE_ID, "ApplianceAutoDetect", "1", lul_device)
	end

	-- Cache the child device ids.
	for sensor = 1, 9 do
		for k, v in pairs(luup.devices) do
			if (v.device_num_parent == lul_device and v.id == "Appliance" .. sensor) then
				if (DEBUG) then luup.log("Child deviceId for Appliance " .. sensor .. " is " .. k) end
				CHILD_DEVICE[tostring(sensor)] = k
			end
		end
	end
end

-- Compute parent device's display.
function calculateFormula()
	local total = 0
	local formula = FORMULA
	for sign, appliance in formula:gfind("([+-])%s-(%d)") do
		if (sign == "+") then
			total = total + (APPLIANCE_POWER[appliance] or 0)
		elseif (sign == "-") then
			total = total - (APPLIANCE_POWER[appliance] or 0)
		end
	end
	return total
end

-- Serialize an array to a string.
-- Used to store two-hourly, daily and monthly history.
function serializeHistory(t)
	local result = ""
	for k, v in pairs(t) do
		result = k .. "=" .. v .. ";" .. result
	end
	return result
end

-- Deserialize a string into an array.
-- Used to store two-hourly, daily and monthly history.
function deserializeHistory(s)
	local result = {}
	for k, v in s:gfind("(.-)=(.-);") do
		result[k] = v
	end
	return result
end	

-- Live-feed data.
function realtimePacket(lul_device, lul_data)
	local matched, source, dsb, time, tmpr, sensor, id, dats

	matched, _, source, dsb, time, tmpr, sensor, id, data = 
		lul_data:find("^&lt;msg>&lt;src>(.-)&lt;/src>&lt;dsb>(%d-)&lt;/dsb>&lt;time>(%d%d:%d%d:%d%d)&lt;/time>&lt;tmpr>(.-)&lt;/tmpr>&lt;sensor>(%d)&lt;/sensor>&lt;id>(.-)&lt;/id>&lt;type>1&lt;/type>(.-)&lt;/msg>$")
	if (matched ~= nil) then
		-- Multiple channels (maybe) in the packet.
		local threePhaseWatts = 0
		for watts in data:gfind("&lt;ch%d>&lt;watts>(%d-)&lt;/watts>&lt;/ch%d>") do
			-- Add together to get combined all-phase wattage.
			threePhaseWatts = threePhaseWatts + tonumber(watts)
		end
		local watts = tostring(threePhaseWatts)
		if (DEBUG) then luup.log("Sensor " .. sensor .. ": " .. watts .. " W") end

		-- Log the child device's power (if there is a child device).
		local childDevice = CHILD_DEVICE[sensor]
		if (childDevice ~= nil) then
			luup.variable_set(ENERGY_SERVICE_ID, "Watts", watts, childDevice)
			luup.variable_set(SERVICE_ID, "DaysSinceBirth", tonumber(dsb), childDevice)
			luup.variable_set(SERVICE_ID, "Time", time, childDevice)
		end

		-- Note this appliance number, if permitted.
		if (AUTO_DETECT or "0" ~= "0") then
			luup.variable_set(SERVICE_ID, "Appliance" .. sensor, id, lul_device)
		end

		-- Compute parent device's reading.
		APPLIANCE_POWER[sensor] = watts
		luup.variable_set(ENERGY_SERVICE_ID, "Watts", calculateFormula(), lul_device)

		-- Store the EnviR's firmware version.
		luup.variable_set(SERVICE_ID, "Version", source, lul_device)

		-- Store the EnviR's concept of the date.
		luup.variable_set(SERVICE_ID, "DaysSinceBirth", tonumber(dsb), lul_device)
		luup.variable_set(SERVICE_ID, "Time", time, lul_device)

		-- Log temperature.  We get it for free.
		luup.variable_set(TEMPERATURE_SERVICE_ID, "CurrentTemperature", tmpr, lul_device)
	end
end

-- Historical data
function historyPacket(lul_device, lul_data)
	local matched, source, dsb, time, dsw, data

	-- All history packets start the same.
	matched, _, source, dsb, time, dsw, data = 
		lul_data:find("^&lt;msg>&lt;src>(.-)&lt;/src>&lt;dsb>(%d-)&lt;/dsb>&lt;time>(%d%d:%d%d:%d%d)&lt;/time>&lt;hist>&lt;dsw>(%d-)&lt;/dsw>&lt;type>1&lt;/type>&lt;units>kwhr&lt;/units>(.+)&lt;/hist>&lt;/msg>$")
	if (matched ~= nil) then
		if (DEBUG) then luup.log("History packet:" .. data) end

		-- data contains (usually) four history entries for all sensors.
		for sensor, history in data:gfind("&lt;data>&lt;sensor>(%d)&lt;/sensor>(.-)&lt;/data>") do
			if (DEBUG) then luup.log("History for sensor " .. sensor .. ":" .. history) end
			local childDevice = CHILD_DEVICE[sensor]
			if (childDevice ~= nil) then
				local twohourlyHistoryChanged, dailyHistoryChanged, monthlyHistoryChanged 
				local twohourlyHistoryTable, dailyHistoryTable, monthlyHistoryTable 
				local twohourlyHistory = luup.variable_get(SERVICE_ID, "TwoHourlyHistory", childDevice) or ""
				local dailyHistory = luup.variable_get(SERVICE_ID, "DailyHistory", childDevice) or ""
				local monthlyHistory = luup.variable_get(SERVICE_ID, "MonthlyHistory", childDevice) or ""

				-- Two-hourly history packet.
				for age, value in history:gfind("&lt;h(%d-)>(.-)&lt;/h%d->") do
					if (DEBUG) then luup.log("Two-hour history for sensor " .. sensor .. " for time " .. age .. " hours ago:" .. value) end
					if (twohourlyHistoryChanged == nil) then
						twohourlyHistoryTable = deserializeHistory(twohourlyHistory)
						twohourlyHistoryChanged = true
					end
					twohourlyHistoryTable[age] = value
				end

				-- Daily history packet.
				for age, value in history:gfind("&lt;d(%d-)>(.-)&lt;/d%d->") do
					if (DEBUG) then luup.log("Daily history for sensor " .. sensor .. " for time " .. age .. " days ago:" .. value) end
					if (dailyHistoryChanged == nil) then
						dailyHistoryTable = deserializeHistory(dailyHistory)
						dailyHistoryChanged = true
					end
					dailyHistoryTable[age] = value
				end

				-- Monthy history packet.
				for age, value in history:gfind("&lt;m(%d-)>(.-)&lt;/m%d->") do
					if (DEBUG) then luup.log("Monthly history for sensor " .. sensor .. " for time " .. age .. " months ago:" .. value) end
					if (monthlyHistoryChanged == nil) then
						monthlyHistoryTable = deserializeHistory(monthlyHistory)
						monthlyHistoryChanged = true
					end
					twohourlyHistoryTable[age] = value
				end

				-- Store back the history that was changed in this packet.
				if (twohourlyHistoryChanged) then
					luup.variable_set(SERVICE_ID, "TwoHourlyHistory", serializeHistory(twohourlyHistoryTable), childDevice)
				end
				if (dailyHistoryChanged) then
					luup.variable_set(SERVICE_ID, "DailyHistory", serializeHistory(dailyHistoryTable), childDevice)
				end
				if (monthlyHistoryChanged) then
					luup.variable_set(SERVICE_ID, "MonthlyHistory", serializeHistory(monthlyHistoryTable), childDevice)
				end
				luup.variable_set(SERVICE_ID, "HistoryDaysSinceBirth", tonumber(dsb), childDevice)
				luup.variable_set(SERVICE_ID, "HistoryTime", time, childDevice)
			end
		end

		-- Log the days-since-wipe value.
		luup.variable_set(SERVICE_ID, "HistoryDaysSinceWipe", tonumber(dsw), childDevice)
	end
end

-- Called when a line of data comes in from the EnviR.
function incoming(lul_device, lul_data)
	if (DEBUG) then luup.log("CurrentCost incoming:" .. lul_data) end
  realtimePacket(lul_device, lul_data)
  historyPacket(lul_device, lul_data)
end

	</functions>
	<startup>initialize</startup>
	<incoming><lua>incoming(lul_device,lul_data)</lua></incoming>
</implementation>
